Hpajaxprc - lightweight RPC library for high-performance AJAX applications.

The library consists of a single small javascript file. It provides
the following classes behind hpajaxrpc namespace:
- JsonRpc
  A tiny wrapper around XMLHttpRequest, which deals with JSON-encoded requests
  and responses. Requests and responses can contain arbitrary data structures,
  which can be serialized without loss with JSON encoding.
  Avoid using JsonRpc instances directly, because they don't support multiple
  outstanding calls. It is much better wrapping them into classes described
  below.

- QueuedRpc
  Queues incoming RPCs, so they are executed serially over the base RPC
  implementation. QueuedRpc completely eliminates headache related to
  "Is it safe to issue yet another request over our RPC implementation?
  Probably the implementation is currently busy with the previous request,
  which will be canceled at the moment we'll issue new one?"
  Using a single QueueRpc instance instead of multiple JsonRpc instances
  can reduce load on your server, since there is no need in establishing
  multiple connections to the server.

- BatchedRpc
  Groups incoming RPCs in batches before forwarding them to the base RPC
  implementation. RPC batching is a well-known approach for minimizing overhead
  associated with each RPC. This overhead may include:
  - network latency;
  - authentication and authorization;
  - fetching user's data from slow storage;
  - serialization overhead (for instance, HTTP headers or RPC message envelope);

- RateLimitedRpc
  Limits the rate of RPCs by discarding incoming RPCs if the time since
  previously executed RPC doesn't exceed given interval. Use this class if you
  need checkpointing or updating application's state on a potentially frequent
  event such as keypress, mouseclick of mousemove, but don't want overloading
  your servers with RPC storm.

The library was designed with flexibility and extensibility in mind.

Aforementioned class instances can be easily combined in various ways through
the corresponding base_rpc_call argument. See examples below.

It is easy to hook up arbitrary logic (for example, authentication,
response status check or automatic RPC retrying) at any level by inspecting
and altering arguments passed to base_rpc_call callbacks. See examples below.

Though the library encourages JSON encoding for RPCs via JsonRpc, it is easy
to switch to other RPC encodings by replacing JsonRpc instances with
the corresponding implementation.

Read more about design desicions behind the API of the library
at http://dev.by/blog/40345 (in Russian).


Compatibility.

The library uses the following 'modern' features, which can be missing in old
web browsers:
- XMLHttpRequest
- JSON
It is possible to use hpajaxrpc even in ancient browsers if these features
are properly emulated. Google for proper emulations - there are over 9000
of them all over the Internet. Check out the following resources at first:
- http://en.wikipedia.org/wiki/XMLHttpRequest#History_and_support
- https://github.com/douglascrockford/JSON-js
- http://kangax.github.com/es5-compat-table/


Server-side code.

The library doesn't provide server-side code, because it can be easily
implemented after investigating JsonRpc code in hpajaxrpc.js file. The following
pseudocode illustrates typical server-side code:

  def json_request_handler(request, response):
    request_text = request.body  # POST body
    request_data = JSON.parse(request_text)
    response_data = process_request(request_data)
    response_text = JSON.stringify(response_data)
    response.write(response_text)

Batched RPCs require special handling, which can be easily implemented after
investigating BatchedRpc code in hpajaxrpc.js file. Below is a typical
process_request() implementation for batched RPCs:

  def process_request(request_data_batched):
    response_data_batched = []
    for request_data in request_data_batched:
      response_data = process_single_request(request_data)
      response_data_batched.append(response_data)
    return response_data_batched

See examples/appengine/ for details.


Basic usage.

  json_rpc = new hpajaxrpc.JsonRpc();

  // Since it is unsafe issuing multiple outstanding calls to json_rpc.run(),
  // wrap it into QueuedRpc object.
  queued_rpc_call = function(rpc_endpoint, request_data, response_callback,
      finalize_callback) {
    json_rpc.run(rpc_endpoint, request_data, response_callback,
        finalize_callback);
  };
  queued_rpc = new hpajaxrpc.QueuedRpc(queued_rpc_call);

  // queued_rpc supports issuing multiple outstanding calls:
  for (i = 0; i < 10; i++) {
    queued_rpc.run('/sum', [10, i], function(result) { alert(result); });
  }

  // Batch rpc calls into a single queued_rpc call, which will be issued
  // no more than once per a second.
  batched_rpc_call = function(request_data, response_callback,
      finalize_callback) {
    queued_rpc.run('/sum-batched', request_data, response_callback,
        finalize_callback);
  };
  batched_rpc = new hpajaxrpc.BatchedRpc(batched_rpc_call, 1000);
  for (i = 0; i < 10; i++) {
    batched_rpc.run([i, 20], function(result) { alert(result); });
  }

  // Obtain data relevant to the current cursor position in intelligent way,
  // i.e. issue no more than one RPC per a second.
  rate_limited_rpc_call = function(request_data, response_callback,
      finalize_callback) {
    queued_rpc.run('/get-data-for-cursor-position', request_data,
        response_callback, finalize_callback);
  };
  rate_limited_rpc = new hpajaxrpc.RateLimitedRpc(rate_limited_rpc_call, 1000);
  window.addEventListener('mousemove', function(e) {
    rate_limited_rpc.run([e.clientX, e.clientY], function(response_data) {
      alert(response_data);
    });
  });

  // Passing complex datastructures in request and response.
  request_data = {
    list1: [1, 'foo', { bar: 'baz'}],
    struct1: {
      struct2: {
        list2: ['foo', 'bar', 332],
      },
    },
  };
  queued_rpc.run('/echo', request_data,
      function(response_data) {
        alert(response_data.list1[2].bar); // 'baz'
        alert(response_data.struct1.struct2.list2[0]); // 'foo'
      });

  // Issue the same RPC every second.
  setInterval(function() { queued_rpc.run('/health-check'); }, 1000);


Advanced usage.

  // Queued authenticated RPCs via queued_rpc with error handling.
  auth_token = 'authentication-token';
  auth_queued_rpc_call = function(rpc_endpoint, request_data, response_callback,
    finalize_callback) {
    queued_rpc.run(rpc_endpoint, [auth_token, request_data], response_callback,
        finalize_callback);
  };
  auth_queued_rpc = new hpajaxrpc.QueuedRpc(auth_queued_rpc_call);
  for (i = 0; i < 10; i++) {
    auth_queued_rpc.run('/sum-authenticated', [i, 30],
        function(result) { alert(result); },
        function(status_code, status_data) {
          if (status_code != hpajaxrpc.statusCodes.SUCCESS) {
            alert('error: status_code=' + status_code + ', status_data=[' +
                status_data + ']');
            // The following values are expected on authentication failure:
            // status_code = HTTP_ERROR
            // status_data = 403  (Forbidden HTTP status code)
          }
        });
  }

  // Response validation
  validate_queued_rpc_call = function(rpc_endpoint, request_data,
      response_callback, finalize_callback) {
    var validate_response_callback = function(response_data) {
      if (typeof(response_data) != 'number') {
        throw 'response_data type be number';
      }
      response_callback(response_data);
    };
    queued_rpc.run(rpc_endpoint, request_data, validate_response_callback,
        finalize_callback);
  };
  validate_queued_rpc = new hpajaxrpc.QueuedRpc(validate_queued_rpc_call);
  for (i = 0; i < 10; i++) {
    validate_queued_rpc.run('/sum-which-sometimes-sends-garbage', [i, 10],
        function(result) { alert(result); },
        function(status_code, status_data) {
          if (status_code == hpajaxrpc.statusCodes.RESPONSE_CALLBACK_ERROR) {
            alert('validation error: ' + status_data);
          }
        });
  }

  // Batched authenticated RPCs (one auth token per batch) via queued_rpc.
  auth_batched_rpc_call = function(request_data, response_callback,
      finalize_callback) {
    queued_rpc.run('/sum-batched-authenticated', [auth_token, request_data],
        response_callback, finalize_callback);
  };
  auth_batched_rpc = new hpajaxrpc.BatchedRpc(auth_batched_rpc_call, 500);
  for (i = 0; i < 10; i++) {
    batched_rpc.run([i, i],
        function(result) { alert(result); },
        function(status_code, status_data) {
          if (status_code != hpajaxrpc.statusCodes.SUCCESS) {
            alert('error: status_code=' + status_code + ', status_data=[' +
                status_data + ']');
            // The following values will be passed on authentication failure:
            // status_code = HTTP_ERROR
            // status_data = 403 (Forbidden HTTP status code)
          }
        });
  }

  // Batched multiplexor, i.e. handling of distinct RPC methods in a batch.
  multiplexor_batched_rpc_call = function(request_data, response_callback,
      finalize_callback) {
    queued_rpc.run('/multiplexor-batched', request_data, response_callback,
        finalize_callback);
  };
  multiplexor_batched_rpc = new hpajaxrpc.BatchedRpc(
      multiplexor_batched_rpc_call, 300);
  for (i = 0; i < 10; i++) {
    multiplexor_batched_rpc.run(['sum', [i, 5]],
        function(result) { alert('sum=' + result); });
    multiplexor_batched_rpc.run(['mul', [i, 3]],
        function(result) { alert('mul=' + result); });
    multiplexor_batched_rpc.run(['pow', [2, i]],
        function(result) { alert('pow=' + result); });
  }

  // Handle RPCs discarded via rate_limited_rpc.
  window.addEventListener('mousemove', function(e) {
    var is_complete = false;
    rate_limited_rpc.run([e.clientX, e.clientY],
        function(response_data) { is_complete = true; alert(response_data); },
        function(status_code) {
          if (status_code == hpajaxrpc.statusCodes.SUCCESS && !is_complete) {
            alert('the rpc [' + e.clientX + ', ' + e.clientY +
                '] has been discarded');
          }
        });
  });

  // Automatic RPC retry on HTTP failure using exponential backoff algorithm.
  min_retry_interval = 100;
  max_retry_interval = 60000;
  retry_queued_rpc_call = function(rpc_endpoint, request_data,
      response_callback, finalize_callback) {
    var retry_interval = min_retry_interval;
    var modified_finalize_callback = function(status_code, status_data) {
      if (status_code != hpajaxrpc.statusCodes.HTTP_ERROR ||
          retry_interval == max_retry_interval) {
        finalize_callback(status_code, status_data);
        return;
      }
      alert('the rpc has been failed due to HTTP error. http status code=' +
          status_data + ', retrying in ' + retry_interval + ' milliseconds');
      setTimeout(
          function() {
            queued_rpc.run(rpc_endpoint, request_data, response_callback,
              modified_finalize_callback);
          }, retry_interval);
      retry_interval += retry_interval;
      if (retry_interval > max_retry_interval) {
        retry_interval = max_retry_interval;
      }
    };
    queued_rpc.run(rpc_endpoint, request_data, response_callback,
        modified_finalize_callback);
  };
  retry_queued_rpc = new hpajaxrpc.QueuedRpc(retry_queued_rpc_call);
  // This call will be retried until the max_retry_interval will be reached.
  // Then the call wil be aborted.
  retry_queued_rpc.run('http://non.existing.rpc/endpoint', 123);
  // This call will be successfully finished provided the given rpc endpoint
  // works correctly.
  retry_queued_rpc.run('/sum', [1, 2]);


How to properly implement base_rpc_call?

The base_rpc_call callback is passed into constructors of QueuedRpc,
BatchedRpc and RateLimitedRpc classes. These classes call base_rpc_call
whenever they decide to issue RPC. All these classes guarantee that the next
base_rpc_call will be called only after the execution of finalize_callback from
the previous call to base_rpc_call. So it is safe to use non-reentrant RPC
implementations in base_rpc_call such as XMLHttpRequest and JsonRpc, wich don't
support multiple outstanding RPC calls.
Each base_rpc_call implementation must abide the following rules:
- it must not throw exceptions;
- it must guarantee that the finalize_callback passed into it will be called
  only once. I.e. it must be always called, but cannot be called multiple times.

Note that run() methods of QueuedRpc, BatchedRpc and RateLimitedRpc abide these
rules, so if your base_rpc_call implementation pass finalize_callback to one of
these methods, it will be definitely called.
If your base_rpc_call implementation doesn't abide these rules, then everything
can happen. In most cases your RPCs will stop working.


Playground.

See http://hpajaxrpc.appspot.com/ . This is a deployment of examples/appengine.
